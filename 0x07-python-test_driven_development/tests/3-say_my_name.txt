===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Nildiert", "Jimenez")
    My name is Nildiert Jimenez



It also works with floating-point values.

::
    >>> say_my_name("", 2)
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name("", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

    >>> say_my_name(None, None)
    Traceback (most recent call last):
    TypeError: first_name must be a string


    >>> say_my_name(1, 2)
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name(1, "Jaramillo")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("", "Smith")
    My name is  Smith

    >>> say_my_name("", "")
    My name is  

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::
